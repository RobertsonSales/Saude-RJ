# Adapta√ß√£o para Pesquisa em Tempo Real

Compreendi que voc√™ deseja adaptar o c√≥digo para realizar pesquisas em tempo real conforme o usu√°rio digita. Vou modificar a aplica√ß√£o Streamlit para implementar essa funcionalidade, o que tornar√° a experi√™ncia do usu√°rio mais din√¢mica e responsiva.

Aqui est√° o c√≥digo adaptado com pesquisa em tempo real:

```python
import streamlit as st
import pandas as pd
import numpy as np
import json
import requests
import folium
from streamlit_folium import folium_static
from fpdf import FPDF
import base64
from io import BytesIO
import os
import random
from datetime import datetime
import re

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Consulta de Unidades de Sa√∫de - RJ",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para carregar dados das unidades de sa√∫de
@st.cache_data
def carregar_dados():
    # Na implementa√ß√£o real, aqui seriam carregados dados de uma API ou banco de dados
    # Para este exemplo, criaremos dados fict√≠cios
    
    # Lista de tipos de unidades
    tipos_unidades = [
        "Hospital Geral", 
        "Unidade B√°sica de Sa√∫de", 
        "Centro de Aten√ß√£o Psicossocial (CAPS)", 
        "Unidade de Pronto Atendimento (UPA)", 
        "Policl√≠nica", 
        "Cl√≠nica da Fam√≠lia", 
        "Centro de Especialidades"
    ]
    
    # Lista de bairros do Rio de Janeiro
    bairros_rj = [
        "Copacabana", "Ipanema", "Tijuca", "Barra da Tijuca", "Botafogo", 
        "Flamengo", "Leblon", "M√©ier", "Recreio dos Bandeirantes", "Jacarepagu√°",
        "Centro", "Madureira", "Penha", "Bangu", "Campo Grande", 
        "Santa Cruz", "Ilha do Governador", "S√£o Crist√≥v√£o", "Graja√∫", "Vila Isabel"
    ]
    
    # N√≠veis de complexidade
    niveis_complexidade = ["Prim√°rio", "Secund√°rio", "Terci√°rio"]
    
    # Perfis de atendimento
    perfis_atendimento = [
        "Urg√™ncia e Emerg√™ncia",
        "Aten√ß√£o B√°sica",
        "Consultas Especializadas",
        "Maternidade",
        "Pediatria",
        "Sa√∫de Mental",
        "Doen√ßas Infecciosas",
        "Reabilita√ß√£o",
        "Cuidados Paliativos",
        "Sa√∫de da Fam√≠lia"
    ]
    
    # Lista para armazenar dados das unidades
    unidades = []
    
    # Criar 20 unidades de sa√∫de fict√≠cias
    for i in range(1, 21):
        tipo_unidade = random.choice(tipos_unidades)
        bairro = random.choice(bairros_rj)
        nivel = random.choice(niveis_complexidade)
        
        # Gerar nome com base no tipo e bairro
        if tipo_unidade == "Hospital Geral":
            prefixo = "Hospital Municipal"
        elif tipo_unidade == "Unidade B√°sica de Sa√∫de":
            prefixo = "UBS"
        elif tipo_unidade == "Centro de Aten√ß√£o Psicossocial (CAPS)":
            prefixo = "CAPS"
        elif tipo_unidade == "Unidade de Pronto Atendimento (UPA)":
            prefixo = "UPA 24h"
        elif tipo_unidade == "Policl√≠nica":
            prefixo = "Policl√≠nica"
        elif tipo_unidade == "Cl√≠nica da Fam√≠lia":
            prefixo = "Cl√≠nica da Fam√≠lia"
        else:
            prefixo = "Centro de Especialidades"
            
        # Adicionar nome fict√≠cio de m√©dico, pol√≠tico ou personalidade
        nomes = ["Dr. Roberto Chabo", "Salgado Filho", "Pedro Ernesto", "Souza Aguiar", 
                 "Miguel Couto", "Louren√ßo Jorge", "Albert Sabin", "Evandro Freire", 
                 "Carlos Chagas", "Rocha Maia", "Rocha Faria", "Albert Schweitzer",
                 "Evandro Chagas", "Mario Kr√∂eff", "Andara√≠", "Ronaldo Gazolla",
                 "Jesus", "Oswaldo Cruz", "Get√∫lio Vargas", "Bonsucesso"]
        
        nome = f"{prefixo} {random.choice(nomes)} - {bairro}"
        
        # Gerar coordenadas aleat√≥rias para o Rio de Janeiro
        # Aproximadamente entre -23.08 e -22.74 latitude, -43.79 e -43.05 longitude
        latitude = random.uniform(-23.08, -22.74)
        longitude = random.uniform(-43.79, -43.05)
        
        # Gerar CEP fict√≠cio para o Rio de Janeiro (20000-000 a 28999-999)
        cep = f"{random.randint(20, 28)}.{random.randint(0, 999):03d}-{random.randint(0, 999):03d}"
        
        # Gerar n√∫mero de telefone fict√≠cio do Rio (21)
        telefone_geral = f"(21) {random.randint(2000, 9999)}-{random.randint(1000, 9999)}"
        tem_emergencia = random.choice([True, False])
        telefone_emergencia = f"(21) {random.randint(2000, 9999)}-{random.randint(1000, 9999)}" if tem_emergencia else ""
        
        # Gerar email
        nome_email = re.sub(r'[^a-zA-Z]', '', bairro.lower())
        email = f"contato.{nome_email}@saude.rj.gov.br"
        email_adm = f"adm.{nome_email}@saude.rj.gov.br"
        
        # Hor√°rios de funcionamento
        if tipo_unidade in ["Hospital Geral", "Unidade de Pronto Atendimento (UPA)"]:
            dias_semana = "Segunda a Domingo"
            horario_semana = "24 horas"
            horario_fim_semana = "24 horas"
        elif tipo_unidade in ["Unidade B√°sica de Sa√∫de", "Cl√≠nica da Fam√≠lia"]:
            dias_semana = "Segunda a Sexta"
            horario_semana = "08:00 √†s 17:00"
            horario_fim_semana = "Fechado"
        else:
            dias_semana = "Segunda a S√°bado"
            horario_semana = f"{random.randint(6, 8):02d}:00 √†s {random.randint(16, 19):02d}:00"
            horario_fim_semana = f"{random.randint(8, 9):02d}:00 √†s {random.randint(12, 14):02d}:00"
        
        # CNPJ fict√≠cio
        cnpj = f"{random.randint(10, 99)}.{random.randint(100, 999)}.{random.randint(100, 999)}/0001-{random.randint(10, 99)}"
        
        # CNES - n√∫mero de 7 d√≠gitos
        cnes = f"{random.randint(1000000, 9999999)}"
        
        # Dados de leitos
        tem_leitos = tipo_unidade in ["Hospital Geral"]
        leitos = {}
        if tem_leitos:
            leitos = {
                "clinica_medica": random.randint(20, 100),
                "pediatria": random.randint(10, 50),
                "cirurgia": random.randint(5, 30),
                "obstetrica": random.randint(5, 25),
                "uti_adulto": random.randint(5, 30),
                "uti_pediatrica": random.randint(3, 15),
                "uti_neonatal": random.randint(3, 15),
                "total": 0  # Ser√° calculado depois
            }
            leitos["total"] = sum([v for k, v in leitos.items() if k != "total"])
        
        # Selecionar perfis de atendimento
        num_perfis = random.randint(1, 4)
        perfil_atendimento = ", ".join(random.sample(perfis_atendimento, num_perfis))
        
        # Dados estat√≠sticos
        estatisticas = {}
        if tipo_unidade == "Hospital Geral":
            estatisticas = {
                "atendimentos_mensais": random.randint(5000, 20000),
                "internacoes_mensais": random.randint(500, 2000),
                "cirurgias_mensais": random.randint(100, 1000),
                "taxa_ocupacao": round(random.uniform(50, 95), 2),
                "tempo_medio_espera": round(random.uniform(60, 240), 1),  # Em minutos
                "satisfacao_paciente": round(random.uniform(3.0, 5.0), 1)
            }
        elif tipo_unidade == "Unidade de Pronto Atendimento (UPA)":
            estatisticas = {
                "atendimentos_mensais": random.randint(3000, 12000),
                "taxa_ocupacao": round(random.uniform(40, 90), 2),
                "tempo_medio_espera": round(random.uniform(30, 180), 1),  # Em minutos
                "satisfacao_paciente": round(random.uniform(3.0, 5.0), 1)
            }
        else:
            estatisticas = {
                "atendimentos_mensais": random.randint(500, 8000),
                "tempo_medio_espera": round(random.uniform(15, 90), 1),  # Em minutos
                "satisfacao_paciente": round(random.uniform(3.5, 5.0), 1)
            }
        
        # Data de inaugura√ß√£o fict√≠cia
        ano_inauguracao = random.randint(1950, 2020)
        mes_inauguracao = random.randint(1, 12)
        dia_inauguracao = random.randint(1, 28)
        data_inauguracao = f"{ano_inauguracao}-{mes_inauguracao:02d}-{dia_inauguracao:02d}"
        
        # URL da foto da fachada (usando Unsplash para gerar URLs de imagens gen√©ricas de hospitais)
        # Em uma implementa√ß√£o real, seria necess√°rio ter fotos reais das unidades
        unsplash_ids = [
            "photo-1578991624414-276ef23a534f",
            "photo-1579154204601-01588f351e67",
            "photo-1586773860418-d37222d8fce3",
            "photo-1583324113626-70df0f4deaab",
            "photo-1538108149393-fbbd81895907",
            "photo-1516841273335-e39b37888115",
            "photo-1587351021759-3e566b3db4fa",
            "photo-1530026186672-2cd00ffc50fe",
            "photo-1519494026892-80bbd2d6fd0d",
            "photo-1582719471137-c3967ffb1c42"
        ]
        foto_fachada = f"https://images.unsplash.com/{random.choice(unsplash_ids)}"
        
        # Criar a unidade
        unidade = {
            "id": i,
            "nome": nome,
            "tipo_unidade": tipo_unidade,
            "nivel_complexidade": nivel,
            "endereco": {
                "logradouro": f"Rua {random.choice(['das Flores', 'Santos Dumont', 'Rio de Janeiro', 'Brasil', 'Marechal Floriano', 'Amaral', 'Dr. Neves', 'Professora Maria', 'Enfermeira Ana', 'Volunt√°rios da P√°tria'])}",
                "numero": str(random.randint(100, 5000)),
                "complemento": "",
                "bairro": bairro,
                "cidade": "Rio de Janeiro",
                "estado": "RJ",
                "cep": cep
            },
            "contato": {
                "telefone_geral": telefone_geral,
                "telefone_emergencia": telefone_emergencia,
                "email": email,
                "email_administrativo": email_adm
            },
            "funcionamento": {
                "dias_semana": dias_semana,
                "horario_semana": horario_semana,
                "horario_fim_semana": horario_fim_semana
            },
            "geolocation": {
                "latitude": latitude,
                "longitude": longitude
            },
            "leitos": leitos,
            "cnpj": cnpj,
            "cnes": cnes,
            "perfil_atendimento": perfil_atendimento,
            "estatisticas": estatisticas,
            "data_inauguracao": data_inauguracao,
            "ultima_atualizacao": datetime.now().strftime("%Y-%m-%d"),
            "foto_fachada": foto_fachada
        }
        
        unidades.append(unidade)
    
    return unidades

# Fun√ß√£o para criar um PDF no formato A6
def criar_pdf(unidade):
    # Criar um objeto PDF
    pdf = FPDF(orientation='P', unit='mm', format=(105, 148))  # A6 = 105x148mm
    pdf.add_page()
    
    # Configurar fonte
    pdf.set_font('Arial', 'B', 12)
    
    # T√≠tulo
    pdf.cell(0, 10, "UNIDADE DE SA√öDE", 0, 1, 'C')
    pdf.line(10, 18, 95, 18)
    
    # Informa√ß√µes b√°sicas
    pdf.set_font('Arial', 'B', 10)
    pdf.cell(0, 7, unidade['nome'], 0, 1, 'C')
    
    pdf.set_font('Arial', '', 8)
    pdf.cell(0, 5, f"Tipo: {unidade['tipo_unidade']}", 0, 1, 'L')
    pdf.cell(0, 5, f"N√≠vel de Complexidade: {unidade['nivel_complexidade']}", 0, 1, 'L')
    pdf.cell(0, 5, f"CNES: {unidade['cnes']}", 0, 1, 'L')
    pdf.cell(0, 5, f"CNPJ: {unidade['cnpj']}", 0, 1, 'L')
    
    # Endere√ßo
    pdf.set_font('Arial', 'B', 9)
    pdf.cell(0, 7, "Endere√ßo", 0, 1, 'L')
    pdf.set_font('Arial', '', 8)
    endereco = unidade['endereco']
    pdf.cell(0, 4, f"{endereco['logradouro']}, {endereco['numero']}", 0, 1, 'L')
    pdf.cell(0, 4, f"{endereco['bairro']}, {endereco['cidade']} - {endereco['estado']}", 0, 1, 'L')
    pdf.cell(0, 4, f"CEP: {endereco['cep']}", 0, 1, 'L')
    
    # Contato
    pdf.set_font('Arial', 'B', 9)
    pdf.cell(0, 7, "Contato", 0, 1, 'L')
    pdf.set_font('Arial', '', 8)
    contato = unidade['contato']
    pdf.cell(0, 4, f"Telefone: {contato['telefone_geral']}", 0, 1, 'L')
    if contato['telefone_emergencia']:
        pdf.cell(0, 4, f"Emerg√™ncia: {contato['telefone_emergencia']}", 0, 1, 'L')
    pdf.cell(0, 4, f"Email: {contato['email']}", 0, 1, 'L')
    
    # Funcionamento
    pdf.set_font('Arial', 'B', 9)
    pdf.cell(0, 7, "Funcionamento", 0, 1, 'L')
    pdf.set_font('Arial', '', 8)
    funcionamento = unidade['funcionamento']
    pdf.cell(0, 4, f"Dias: {funcionamento['dias_semana']}", 0, 1, 'L')
    pdf.cell(0, 4, f"Hor√°rio: {funcionamento['horario_semana']}", 0, 1, 'L')
    pdf.cell(0, 4, f"Fim de Semana: {funcionamento['horario_fim_semana']}", 0, 1, 'L')
    
    # Perfil de Atendimento
    pdf.set_font('Arial', 'B', 9)
    pdf.cell(0, 7, "Perfil de Atendimento", 0, 1, 'L')
    pdf.set_font('Arial', '', 8)
    pdf.multi_cell(0, 4, unidade['perfil_atendimento'])
    
    # Leitos (se houver)
    if unidade['leitos']:
        pdf.set_font('Arial', 'B', 9)
        pdf.cell(0, 7, "Leitos", 0, 1, 'L')
        pdf.set_font('Arial', '', 8)
        for tipo, quantidade in unidade['leitos'].items():
            if tipo != "total":
                tipo_formatado = tipo.replace("_", " ").title()
                pdf.cell(0, 4, f"{tipo_formatado}: {quantidade}", 0, 1, 'L')
    
    # Estat√≠sticas
    if unidade['estatisticas']:
        pdf.set_font('Arial', 'B', 9)
        pdf.cell(0, 7, "Estat√≠sticas", 0, 1, 'L')
        pdf.set_font('Arial', '', 8)
        for tipo, valor in unidade['estatisticas'].items():
            if tipo == "atendimentos_mensais":
                pdf.cell(0, 4, f"Atendimentos mensais: {valor:,}".replace(",", "."), 0, 1, 'L')
            elif tipo == "tempo_medio_espera":
                pdf.cell(0, 4, f"Tempo m√©dio de espera: {valor} min", 0, 1, 'L')
            elif tipo == "taxa_ocupacao":
                pdf.cell(0, 4, f"Taxa de ocupa√ß√£o: {valor}%", 0, 1, 'L')
            elif tipo == "satisfacao_paciente":
                pdf.cell(0, 4, f"Satisfa√ß√£o do paciente: {valor}/5.0", 0, 1, 'L')
            else:
                tipo_formatado = tipo.replace("_", " ").title()
                pdf.cell(0, 4, f"{tipo_formatado}: {valor}", 0, 1, 'L')
    
    # Rodap√©
    pdf.set_y(-15)
    pdf.set_font('Arial', 'I', 6)
    pdf.cell(0, 5, f"Relat√≥rio gerado em {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}", 0, 1, 'R')
    
    # Retorna PDF como base64 para download
    pdf_output = BytesIO()
    pdf.output(pdf_output)
    pdf_base64 = base64.b64encode(pdf_output.getvalue()).decode()
    
    return pdf_base64

# Fun√ß√£o para gerar o mapa da unidade
def gerar_mapa(latitude, longitude, nome_unidade):
    m = folium.Map(location=[latitude, longitude], zoom_start=15)
    folium.Marker(
        [latitude, longitude],
        popup=nome_unidade,
        tooltip=nome_unidade,
        icon=folium.Icon(color="red", icon="hospital", prefix="fa")
    ).add_to(m)
    return m

# Interface Streamlit
def main():
    # Carregar dados
    unidades = carregar_dados()
    
    # Definir CSS personalizado
    st.markdown("""
    <style>
    .header-style {
        font-size: 2.5rem;
        font-weight: bold;
        color: #0066cc;
        text-align: center;
        margin-bottom: 20px;
    }
    .subheader-style {
        font-size: 1.5rem;
        font-weight: bold;
        color: #333;
    }
    .info-box {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin: 10px 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .info-section {
        margin: 10px 0;
    }
    .info-title {
        font-weight: bold;
        margin-bottom: 5px;
    }
    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }
    .stat-card {
        background-color: #e6f3ff;
        border-radius: 5px;
        padding: 10px;
        width: calc(33% - 10px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    .stat-value {
        font-size: 1.3rem;
        font-weight: bold;
        color: #0066cc;
    }
    .stat-label {
        font-size: 0.9rem;
        color: #555;
    }
    .map-container {
        border-radius: 10px;
        overflow: hidden;
        margin: 20px 0;
    }
    .search-result-item {
        cursor: pointer;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 5px;
        transition: background-color 0.2s;
    }
    .search-result-item:hover {
        background-color: #f0f0f0;
    }
    .selected {
        background-color: #e6f3ff;
        border-left: 4px solid #0066cc;
    }
    .pdf-button {
        background-color: #ff5252;
        color: white;
        padding: 10px 15px;
        border-radius: 5px;
        text-decoration: none;
        display: inline-block;
        margin-top: 10px;
        font-weight: bold;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Inicializar o estado da sess√£o para armazenar a unidade selecionada se n√£o existir
    if 'unidade_selecionada' not in st.session_state:
        st.session_state.unidade_selecionada = None
    
    # Cabe√ßalho da aplica√ß√£o
    st.markdown('<div class="header-style">Consulta de Unidades de Sa√∫de do Rio de Janeiro</div>', unsafe_allow_html=True)
    
    # Layout de duas colunas principais
    col_pesquisa, col_detalhes = st.columns([1, 2])
    
    with col_pesquisa:
        st.markdown("### üîç Pesquise por nome da unidade")
        
        # Barra de pesquisa com comportamento em tempo real
        # Usando um callback para atualizar resultados em tempo real
        termo_pesquisa = st.text_input(
            "Digite parte do nome da unidade", 
            key="search_input",
            help="Digite para filtrar unidades em tempo real"
        )
        
        # Container para os resultados da pesquisa
        st.markdown("### Resultados da pesquisa")
        resultado_container = st.container()
        
        with resultado_container:
            # Filtrar unidades em tempo real conforme o usu√°rio digita
            if termo_pesquisa:
                unidades_filtradas = [u for u in unidades if termo_pesquisa.lower() in u['nome'].lower()]
                
                if unidades_filtradas:
                    st.success(f"üè• {len(unidades_filtradas)} unidades encontradas")
                    
                    # Exibir resultados da pesquisa como uma lista clic√°vel
                    for u in unidades_filtradas:
                        # Verificar se esta √© a unidade selecionada para destac√°-la
                        is_selected = st.session_state.unidade_selecionada and st.session_state.unidade_selecionada['id'] == u['id']
                        css_class = "search-result-item selected" if is_selected else "search-result-item"
                        
                        # Criar um item clic√°vel para cada resultado
                        if st.markdown(f"<div class='{css_class}'>{u['nome']}<br><small>{u['tipo_unidade']} | {u['endereco']['bairro']}</small></div>", unsafe_allow_html=True):
                            st.session_state.unidade_selecionada = u
                        
                        # Alternativa usando bot√£o (caso o markdown clic√°vel n√£o funcione bem)
                        if st.button(f"Ver Detalhes", key=f"btn_{u['id']}"):
                            st.session_state.unidade_selecionada = u
                            st.experimental_rerun()
                else:
                    st.warning("Nenhuma unidade encontrada com esse nome.")
            else:
                # Se n√£o houver pesquisa, exibir algumas unidades como exemplo
                st.info("Digite no campo acima para pesquisar unidades de sa√∫de.")
                st.markdown("#### Exemplos de unidades dispon√≠veis:")
                for u in unidades[:5]:  # Mostrar apenas as 5 primeiras como exemplo
                    if st.button(u['nome'], key=f"exemplo_{u['id']}"):
                        st.session_state.unidade_selecionada = u
                        st.experimental_rerun()
    
    # Coluna de detalhes da unidade
    with col_detalhes:
        # Verificar se uma unidade est√° selecionada
        if st.session_state.unidade_selecionada:
            unidade = st.session_state.unidade_selecionada
            
            # Bot√£o para limpar a sele√ß√£o e voltar √† pesquisa
            if st.button("‚Üê Voltar √† pesquisa", key="btn_voltar"):
                st.session_state.unidade_selecionada = None
                st.experimental_rerun()
            
            # Container para detalhes da unidade
            detalhes_container = st.container()
            
            with detalhes_container:
                # T√≠tulo da unidade
                st.markdown(f"## {unidade['nome']}")
                
                # Layout de duas colunas para os detalhes
                col1, col2 = st.columns([3, 2])
                
                with col1:
                    # Informa√ß√µes b√°sicas
                    st.markdown('<div class="info-box">', unsafe_allow_html=True)
                    st.markdown("### ‚ÑπÔ∏è Informa√ß√µes B√°sicas")
                    st.markdown(f"**Tipo:** {unidade['tipo_unidade']}")
                    st.markdown(f"**N√≠vel de Complexidade:** {unidade['nivel_complexidade']}")
                    st.markdown(f"**Perfil de Atendimento:** {unidade['perfil_atendimento']}")
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    # Endere√ßo
                    st.markdown('<div class="info-box">', unsafe_allow_html=True)
                    st.markdown("### üìç Endere√ßo")
                    endereco = unidade['endereco']
                    st.markdown(f"{endereco['logradouro']}, {endereco['numero']}")
                    st.markdown(f"{endereco['bairro']}, {endereco['cidade']} - {endereco['estado']}")
                    st.markdown(f"CEP: {endereco['cep']}")
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    # Contato
                    st.markdown('<div class="info-box">', unsafe_allow_html=True)
                    st.markdown("### üìû Contato")
                    contato = unidade['contato']
                    st.markdown(f"**Telefone Geral:** {contato['telefone_geral']}")
                    if contato['telefone_emergencia']:
                        st.markdown(f"**Telefone Emerg√™ncia:** {contato['telefone_emergencia']}")
                    st.markdown(f"**Email:** {contato['email']}")
                    st.markdown(f"**Email Administrativo:** {contato['email_administrativo']}")
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    # Funcionamento
                    st.markdown('<div class="info-box">', unsafe_allow_html=True)
                    st.markdown("### ‚è∞ Funcionamento")
                    funcionamento = unidade['funcionamento']
                    st.markdown(f"**Dias de atendimento:** {funcionamento['dias_semana']}")
                    st.markdown(f"**Hor√°rio normal:** {funcionamento['horario_semana']}")
                    st.markdown(f"**Hor√°rio fim de semana:** {funcionamento['horario_fim_semana']}")
                    st.markdown("</div>", unsafe_allow_html=True)
                
                with col2:
                    # Foto da fachada
                    st.image(unidade['foto_fachada'], caption=f"Fachada da unidade", use_column_width=True)
                    
                    # Bot√£o para gerar PDF
                    pdf_base64 = criar_pdf(unidade)
                    href = f'<a href="data:application/pdf;base64,{pdf_base64}" download="{unidade["nome"].replace(" ", "_")}.pdf" class="pdf-button"><i class="fas fa-file-pdf"></i> Gerar PDF (A6)</a>'
                    st.markdown(href, unsafe_allow_html=True)
                    
                    # Estat√≠sticas
                    if unidade['estatisticas']:
                        st.markdown("### üìä Estat√≠sticas")
                        st.markdown('<div class="card-container">', unsafe_allow_html=True)
                        
                        # Exibir estat√≠sticas em cards
                        for chave, valor in unidade['estatisticas'].items():
                            if chave == "atendimentos_
                        # Exibir estat√≠sticas em cards
                        for chave, valor in unidade['estatisticas'].items():
                            if chave == "atendimentos_mensais":
                                st.markdown(f"""
                                <div class="stat-card">
                                    <div class="stat-value">{valor:,}</div>
                                    <div class="stat-label">Atendimentos mensais</div>
                                </div>
                                """.replace(",", "."), unsafe_allow_html=True)
                            elif chave == "tempo_medio_espera":
                                st.markdown(f"""
                                <div class="stat-card">
                                    <div class="stat-value">{valor} min</div>
                                    <div class="stat-label">Tempo m√©dio de espera</div>
                                </div>
                                """, unsafe_allow_html=True)
                            elif chave == "taxa_ocupacao":
                                st.markdown(f"""
                                <div class="stat-card">
                                    <div class="stat-value">{valor}%</div>
                                    <div class="stat-label">Taxa de ocupa√ß√£o</div>
                                </div>
                                """, unsafe_allow_html=True)
                            elif chave == "satisfacao_paciente":
                                st.markdown(f"""
                                <div class="stat-card">
                                    <div class="stat-value">{valor}/5.0</div>
                                    <div class="stat-label">Satisfa√ß√£o do paciente</div>
                                </div>
                                """, unsafe_allow_html=True)
                            else:
                                label = chave.replace("_", " ").title()
                                st.markdown(f"""
                                <div class="stat-card">
                                    <div class="stat-value">{valor:,}</div>
                                    <div class="stat-label">{label}</div>
                                </div>
                                """.replace(",", "."), unsafe_allow_html=True)
                        
                        st.markdown('</div>', unsafe_allow_html=True)
                
                # Nova linha para informa√ß√µes adicionais
                st.markdown("---")
                col_info1, col_info2 = st.columns(2)
                
                with col_info1:
                    # Leitos (se houver)
                    if unidade['leitos']:
                        st.markdown('<div class="info-box">', unsafe_allow_html=True)
                        st.markdown("### üõèÔ∏è Leitos")
                        leitos = unidade['leitos']
                        for tipo, quantidade in leitos.items():
                            if tipo != "total":
                                tipo_formatado = tipo.replace("_", " ").title()
                                st.markdown(f"**{tipo_formatado}:** {quantidade}")
                        st.markdown(f"**Total de leitos:** {leitos.get('total', 0)}")
                        st.markdown("</div>", unsafe_allow_html=True)
                
                with col_info2:
                    # Informa√ß√µes Administrativas
                    st.markdown('<div class="info-box">', unsafe_allow_html=True)
                    st.markdown("### üìã Informa√ß√µes Administrativas")
                    st.markdown(f"**CNPJ:** {unidade['cnpj']}")
                    st.markdown(f"**CNES:** {unidade['cnes']}")
                    st.markdown(f"**Data de Inaugura√ß√£o:** {datetime.strptime(unidade['data_inauguracao'], '%Y-%m-%d').strftime('%d/%m/%Y')}")
                    st.markdown(f"**√öltima Atualiza√ß√£o:** {datetime.strptime(unidade['ultima_atualizacao'], '%Y-%m-%d').strftime('%d/%m/%Y')}")
                    st.markdown("</div>", unsafe_allow_html=True)
                
                # Mapa com a localiza√ß√£o
                st.markdown("### üó∫Ô∏è Localiza√ß√£o")
                st.markdown('<div class="map-container">', unsafe_allow_html=True)
                coordenadas = [unidade['geolocation']['latitude'], 
                              unidade['geolocation']['longitude']]
                
                # Criar mapa usando folium
                m = gerar_mapa(coordenadas[0], coordenadas[1], unidade['nome'])
                folium_static(m, width=800)
                st.markdown('</div>', unsafe_allow_html=True)
        else:
            # Se nenhuma unidade estiver selecionada, mostrar mensagem de boas-vindas
            st.markdown('<div class="info-box">', unsafe_allow_html=True)
            st.markdown("### üëã Bem-vindo ao Sistema de Consulta de Unidades de Sa√∫de")
            st.markdown("""
            **Instru√ß√µes:**
            1. Digite o nome ou parte do nome da unidade de sa√∫de na barra de pesquisa √† esquerda
            2. A pesquisa ocorre em tempo real conforme voc√™ digita
            3. Clique em uma unidade nos resultados para ver informa√ß√µes detalhadas
            4. Voc√™ pode gerar um PDF no formato A6 com todas as informa√ß√µes
            
            Este sistema permite acesso a informa√ß√µes detalhadas sobre unidades de sa√∫de no estado do Rio de Janeiro, incluindo:
            - Perfil de atendimento e n√≠vel de complexidade
            - Localiza√ß√£o e contatos
            - Hor√°rios de funcionamento 
            - Leitos dispon√≠veis
            - Dados administrativos (CNPJ, CNES)
            - Estat√≠sticas de atendimento
            """)
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Exibir algumas estat√≠sticas gerais
            st.markdown('<div class="info-box">', unsafe_allow_html=True)
            st.markdown("### üìä Estat√≠sticas gerais")
            
            # Calcular estat√≠sticas para apresentar
            tipos_contagem = {}
            bairros_contagem = {}
            total_leitos = 0
            
            for u in unidades:
                # Contar por tipo de unidade
                tipo = u['tipo_unidade']
                if tipo in tipos_contagem:
                    tipos_contagem[tipo] += 1
                else:
                    tipos_contagem[tipo] = 1
                
                # Contar por bairro
                bairro = u['endereco']['bairro']
                if bairro in bairros_contagem:
                    bairros_contagem[bairro] += 1
                else:
                    bairros_contagem[bairro] = 1
                
                # Contar total de leitos
                if u['leitos'] and 'total' in u['leitos']:
                    total_leitos += u['leitos']['total']
            
            # Exibir gr√°ficos ou estat√≠sticas
            col_stat1, col_stat2 = st.columns(2)
            
            with col_stat1:
                st.markdown("#### Distribui√ß√£o por tipo de unidade")
                # Criar DataFrame para o gr√°fico
                tipo_df = pd.DataFrame(list(tipos_contagem.items()), columns=['Tipo', 'Quantidade'])
                st.bar_chart(tipo_df.set_index('Tipo'))
            
            with col_stat2:
                st.markdown("#### Unidades por bairro")
                # Criar DataFrame para o gr√°fico
                bairro_df = pd.DataFrame(list(bairros_contagem.items()), columns=['Bairro', 'Quantidade'])
                st.bar_chart(bairro_df.set_index('Bairro'))
            
            st.markdown(f"**Total de unidades cadastradas:** {len(unidades)}")
            st.markdown(f"**Total de leitos dispon√≠veis:** {total_leitos}")
            
            # Exibir mapa com todas as unidades
            st.markdown("#### Mapa de todas as unidades")
            
            # Criar mapa centralizado no Rio de Janeiro
            m_all = folium.Map(location=[-22.9068, -43.1729], zoom_start=11)
            
            # Adicionar cada unidade ao mapa
            for u in unidades:
                lat = u['geolocation']['latitude']
                lon = u['geolocation']['longitude']
                nome = u['nome']
                tipo = u['tipo_unidade']
                
                # Definir cor do marcador baseado no tipo de unidade
                if "Hospital" in tipo:
                    cor = "red"
                elif "UPA" in tipo:
                    cor = "orange"
                elif "Cl√≠nica" in tipo:
                    cor = "green"
                elif "CAPS" in tipo:
                    cor = "blue"
                else:
                    cor = "purple"
                
                folium.Marker(
                    [lat, lon],
                    popup=f"<b>{nome}</b><br>{tipo}",
                    tooltip=nome,
                    icon=folium.Icon(color=cor, icon="hospital", prefix="fa")
                ).add_to(m_all)
            
            # Exibir o mapa
            folium_static(m_all, width=800, height=500)
            
            st.markdown("</div>", unsafe_allow_html=True)

if __name__ == "__main__":
    main()
